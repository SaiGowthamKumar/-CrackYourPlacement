Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8

Solution:

class Solution {
public:
    void helper(int n,vector<string>&ans,int open,int close,string tmp){
        if(tmp.size()==2*n){
            ans.push_back(tmp);
            return;
        }
        if(open<n){
            helper(n,ans,open+1,close,tmp+'(');
        }
        if(close<open){
            helper(n,ans,open,close+1,tmp+')');
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string>ans;
        helper(n,ans,0,0,"");
        return ans;
    }
};