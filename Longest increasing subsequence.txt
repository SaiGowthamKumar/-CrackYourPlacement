Given an integer array nums, return the length of the longest strictly increasing 
subsequence.
Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:

1 <= nums.length <= 2500
-104 <= nums[i] <= 104
 

Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?

Solution:

class Solution {

public:
    int helper(vector<int>&nums,int idx,int prev_ele,int prev_idx,vector<vector<int>>&dp){
        if(idx==nums.size())
           return 0;
        if(dp[idx][prev_idx+1]!=-1)
            return dp[idx][prev_idx+1];
        int nottake=helper(nums,idx+1,prev_ele,prev_idx,dp);
        int take=0;
        if(prev_ele==INT_MAX || nums[idx]>prev_ele){
            take=1+helper(nums,idx+1,nums[idx],idx,dp);
        }
        return dp[idx][prev_idx+1]=max(take,nottake);
    }
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return helper(nums,0,INT_MAX,-1,dp);
    }
};